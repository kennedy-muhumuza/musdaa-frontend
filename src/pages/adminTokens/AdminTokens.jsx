import { useEffect, useState } from "react";
import axios from "axios";
import styles from "./AdminTodo.module.css";

export const backendUrl = "http://localhost:5000";

function AdminTokens() {
  const [tokens, setTokens] = useState([]);
  const [associatedEmail, setAssociatedEmail] = useState("");

  const associatedEmailChangeHandler = (event) => {
    setAssociatedEmail(event.target.value);
    console.log(associatedEmail);
  };
  const generationDate = new Date();

  // provides format  -> Sun Jul 03 2022;ss
  const getDateString = (dateObject) => {
    // const date = new Date(JSON.parse(dateObject).date);
    const date = new Date(dateObject);
    return date.toDateString();
  };
  //provides format  -> 3:47 AM
  const getTime = (dateObject) => {
    // const date = new Date(JSON.parse(dateObject).date);
    const date = new Date(dateObject);
    return date.toLocaleTimeString("en-US", {
      hour: "numeric",
      minute: "numeric",
      hour12: "true",
    });
  };

  //ADD TOKENS
  const addTodoHandler = async (event) => {
    event.preventDefault();
    try {
      const response = await axios.post(`${backendUrl}/generate-token`, {
        // generatedAt: JSON.stringify({ date: date }),
        generatedAt: generationDate,
        generatedById: 10,
        associatedEmail: associatedEmail,
      });
      // setTodo("");
      console.log(response);
      //   getTokenHandler();
    } catch (error) {
      console.error("error", error.message);
    }
  };

  //   const getTokenHandler = async () => {
  //     try {
  //       // const response = await axios.get(`${backendUrl}/get-tokens/${10}`, {
  //       const response = await axios.get(
  //         `${backendUrl}/get-tokens?generatedById=${10}`
  //       );
  //       console.log("fetching todos");
  //       console.log(response);
  //       setTokens(response.data.adminTokens);
  //     } catch (error) {
  //       console.log("error", error.message);
  //     }
  //   };

  //   GET TOKENS
  useEffect(() => {
    const getTokenHandler = async () => {
      try {
        // const response = await axios.get(`${backendUrl}/get-tokens/${10}`, {
        const response = await axios.get(
          `${backendUrl}/get-tokens?generatedById=${10}`
        );
        console.log("fetching todos");
        console.log(response);
        setTokens(response.data.adminTokens);
      } catch (error) {
        console.log("error", error.message);
      }
    };
    getTokenHandler();
  }, []);
  return (
    <div className={styles.container}>
      <form className="form" onSubmit={(event) => addTodoHandler(event)}>
        <input
          type="text"
          value={associatedEmail}
          onChange={(event) => associatedEmailChangeHandler(event)}
          placeholder="Enter your email here..."
          className={styles.email}
          required
        />
        <button type="submit" className={styles.addEmailBtn}>
          Add Email
        </button>
      </form>

      <h3 className={styles.adminTokensTitle}>ADMIN TOKENS</h3>
      <div className="backend-todos">
        <table>
          <thead>
            <tr className={styles.tableHeader}>
              <th>Token id</th>
              <th>Token </th>
              <th>Associated email</th>
              <th>Date of generation</th>
              <th>Date of expiry</th>
              <th>Generated by</th>
              <th>Used?</th>
            </tr>
          </thead>
          <tbody>
            {tokens.map((token, index) => {
              return (
                <tr key={index}>
                  <td>{token.token_id}</td>
                  <td>{token.token}</td>
                  <td>{token.associated_email}</td>
                  <td>{token.generated_at}</td>
                  <td>
                    {
                      <>
                        <span>{getDateString(token.expires_at)}</span>{" "}
                        <span>{getTime(token.expires_at)}</span>
                      </>
                    }
                  </td>
                  <td>{token.generated_by_id}</td>
                  <td>{token.is_used ? "used" : "not yet"}</td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default AdminTokens;
